#!/bin/bash

###################  required inputs  #####################

#  $mingw, $binpath, $libpath, $sharepath, $localpath
#  $common_flags, $option_flags, $extra_warnings, $extra_flags, $ldflags, $ldlibs
#  $srcdir, $rules, $shares

###################  utility functions  ###################

write_makefile_dep ()
{
	echo "Regenerating dependencies..."

	echo "# Makefile.dep"    >  Makefile.dep
	echo "# Generated by $0" >> Makefile.dep
	echo "# $(date)"         >> Makefile.dep

	i=0
	for x in $rules ; do
		y=($(echo $x | tr ':' ' '))

		if [[ ${y[0]} == 'app' || ${y[0]} == 'lib' ]] ; then
			objs[$i]=$(utils/find_deps.pl --objects ${y[2]})
			echo "${y[2]}_OBJ = ${objs[$i]}" >> Makefile.dep
			i=$(($i+1))
		fi
	done
	all_obj=$(utils/find_deps.pl --list ${objs[@]})  # remove duplicates

	echo -e "\nALL_OBJ = $all_obj\n"      >> Makefile.dep
	utils/find_deps.pl --targets $all_obj >> Makefile.dep

	echo -e "\nWrote Makefile.dep"
}

write_makefile ()
{
	for x in $rules ; do
		y=($(echo $x | tr ':' ' '))
		all_targets="$all_targets ${y[1]}"
	done

	if $mingw ; then
		install_targets="install_local"  # do not attempt root install (even though on MSYS2 it might be possible...)
	else
		install_targets="install install_local"
	fi

	echo "# Makefile"        >  Makefile
	echo "# Generated by $0" >> Makefile
	echo "# $(date)"         >> Makefile

	if ! $mingw ; then
		echo >> Makefile
		echo "BINPATH   = \$(DESTDIR)$binpath"   >> Makefile
		echo "LIBPATH   = \$(DESTDIR)$libpath"   >> Makefile
		echo "SHAREPATH = \$(DESTDIR)$sharepath" >> Makefile
	fi
	echo "LOCALPATH = \$(DESTDIR)$localpath" >> Makefile

	echo "
COMMON_FLAGS   = $common_flags
OPTION_FLAGS   = $option_flags
EXTRA_WARNINGS = $extra_warnings
EXTRA_FLAGS    = $extra_flags

CFLAGS = \$(COMMON_FLAGS) -march=$arch \$(OPTION_FLAGS) \$(EXTRA_WARNINGS) -I$srcdir \$(EXTRA_FLAGS)
LDFLAGS = $ldflags
LDLIBS = $ldlibs

ALL_TARGETS = $all_targets

CC = $cc
INSTALL = install

.PHONY : all clean $install_targets

all : \$(ALL_TARGETS)

clean :
	@rm -f \$(ALL_OBJ) \$(ALL_TARGETS)

%.o : %.c
	@echo \"  CC   \$(patsubst $srcdir/%,%,\$@)\"
	@\$(CC) \$(CFLAGS) -o \$@ -c \$<

include Makefile.dep
" >> Makefile

	for x in $rules ; do
		y=($(echo $x | tr ':' ' '))

		if [[ ${y[0]} == 'app' ]] ; then bin_files="$bin_files ${y[1]}" ; else lib_files="$lib_files ${y[1]}" ; fi
		if [[ ${y[0]} == 'lib' ]] ; then shared="-shared"               ; else shared=""                      ; fi

		if [[ ${y[0]} == 'copy' ]] ; then
			echo -e "${y[1]} : ${y[2]}"                               >> Makefile
			echo -e "\t@echo \"  CP   \$(patsubst $srcdir/%,%,\$@)\"" >> Makefile
			echo -e "\t@\$(INSTALL) \$< \$@\n"                        >> Makefile
		else
			echo -e "${y[1]} : \$(${y[2]}_OBJ)"                             >> Makefile
			echo -e "\t@echo \"  LD   \$(patsubst $srcdir/%,%,\$@)\""       >> Makefile
			echo -e "\t@\$(CC) \$(LDFLAGS) $shared -o \$@ \$^ \$(LDLIBS)\n" >> Makefile
		fi
	done

	if ! $mingw ; then
		write_install_rule "install" "\$(BINPATH)" "\$(LIBPATH)" "\$(SHAREPATH)"
	fi
	write_install_rule "install_local" "\$(LOCALPATH)" "\$(LOCALPATH)" "\$(LOCALPATH)"

	echo "Wrote Makefile, now run make..."
}

write_install_rule ()
{
	echo "$1 : \$(ALL_TARGETS)" >> Makefile
	for x in $bin_files ; do
		printf "\t\$(INSTALL) -D -m 755 %-60s %s\n" $x $2/$(basename $x) >> Makefile
	done
	for x in $lib_files ; do
		printf "\t\$(INSTALL) -D -m 644 %-60s %s\n" $x $3/$(basename $x) >> Makefile
	done
	for x in $shares ; do
		y=($(echo $x | tr ':' ' '))
		printf "\t\$(INSTALL) -D -m 644 %-60s %s\n" ${y[1]} $4/${y[0]} >> Makefile
	done
	echo >> Makefile
}
