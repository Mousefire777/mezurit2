#!/bin/bash

source utils/functions.sh

#######################  constants  #######################

prog1=mezurit2
prog2=Mezurit2
version=0.92beta4
srcdir=src
common_flags="-ansi --std=c99 -pedantic -Wall -O2 -funroll-loops -fstack-clash-protection -fcf-protection -Wp,-D_FORTIFY_SOURCE=2"
extra_warnings="-Wextra -Wno-unused-parameter -Wpointer-arith -Wreturn-type -Wcast-qual -Wswitch -Wshadow -Wcast-align -Wwrite-strings -Wchar-subscripts -Winline -Wnested-externs -Wredundant-decls -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Wconversion -Wformat -Wformat-security"

#################  command line options  ##################

mingw=false
python=python2
gtk=gtk+-3.0
daq_request=autodetect
gpib_request=autodetect
headerwarnings=false
prefix=/usr
regen=false

while [[ $# -gt 0 ]] ; do
	if [[ $1 == '--help' || $1 == '-h' ]] ; then
		echo -e "Usage: $0 [OPTION...]\n"
		echo -e "  --mingw           use the MinGW compiler to generate Windows binaries\n"
		echo -e "  --python3         use Python 3 rather than Python 2\n"
		echo -e "  --gtk4            use GTK+ 4 rather than GTK+ 3\n"
		echo -e "  --daq=[DRIVER]    specify DAQ driver: none, comedi, nidaq, nidaqmx (default: autodetect)\n"
		echo -e "  --gpib=[DRIVER]   specify GPIB driver: none, linuxgpib, ni488 (default: autodetect)\n"
		echo -e "  --prefix=[PATH]   specify installation path (not applicable to MinGW builds)\n"
		echo -e "  --headerwarnings  do not suppress compiler warnings generated by system headers e.g. GTK\n"
		echo -e "  --regen           regenerate Makefile.dep (requires perl)\n"
		exit
	elif [[ $1 == '--mingw'          ]] ; then mingw=true
	elif [[ $1 == '--python3'        ]] ; then python=python3
	elif [[ $1 == '--gtk4'           ]] ; then gtk=gtk+-4.0
	elif [[ $1 =~ '--daq'            ]] ; then daq_request=$(echo $1 | sed "s/--daq=//")
	elif [[ $1 == '--gpib'           ]] ; then gpib_request=$(echo $1 | sed "s/--gpib=//")
	elif [[ $1 == '--headerwarnings' ]] ; then headerwarnings=true
	elif [[ $1 =~ '--prefix'         ]] ; then prefix=$(echo $1 | sed "s/--prefix=//")
	elif [[ $1 == '--regen'          ]] ; then regen=true
	else
		echo -e "Unrecognized option: $1\n"
		$0 --help
		exit 1
        fi
	shift
done

######################  variables  ########################

option_flags="-DPROG1=$prog1 -DPROG2=$prog2 -DVERSION=$version -DSTATUS"  # use lib/status.h
extra_flags=
ldflags=
ldlibs="-lm"
rules="copy:src/main/setup/${prog1}compute.py:src/main/setup/compute.py \
       copy:src/control/${prog1}control.py:src/control/client.py"
shares="COPYING:COPYING                                  \
        terminal_startup.py:resource/terminal_startup.py \
        $(find resource -name '*.pdf' -printf '%P:%p ')  \
        $(find resource -name '*.mcf' -printf '%P:%p ')  \
        $(find resource -name '*.png' -printf '%P:%p ')"

if $headerwarnings ; then
	option_flags="$option_flags -DSHOW_HEADER_WARNINGS"
fi

###################  system detection  ####################

if [[ $(uname -o) == 'Msys' ]] ; then
	mingw=true
	mingwpath=$MINGW_PREFIX
	nipath=$NIEXTCCOMPILERSUPP
elif $mingw ; then
	mingwpath=/usr/i686-w64-mingw32
	nipath=./win32
fi

if $mingw ; then
	system=Windows
	arch=i686

	cc=i686-w64-mingw32-gcc
	pc=i686-w64-mingw32-pkg-config
	prefix="(not applicable)"
	localpath=$prog2-$version
	option_flags="$option_flags -DMINGW"
	ldlibs="$ldlibs -lwinmm"
	rules="$rules app:src/main/$prog2.exe:src/main/main.c \
	              lib:src/control/_${prog1}control.pyd:src/control/client.c"
	shares="$shares themes/lightdark.css:resource/themes/lightdark-windows.css"
else
	system=Linux
	arch=x86-64

	cc=gcc
	pc=pkg-config
	binpath=$prefix/bin
	libpath=$prefix/lib/$prog1 
	sharepath=$prefix/share/$prog1
	localpath=$prog1-$version
	option_flags="$option_flags -DBINPATH=$binpath -DLIBPATH=$libpath -DSHAREPATH=$sharepath"
	ldflags="$ldflags -Wl,--as-needed -Wl,-z,relro,-z,now"
	rules="$rules app:src/main/$prog1:src/main/main.c \
	              lib:src/control/_${prog1}control.so:src/control/client.c"
	shares="$shares themes/lightdark.css:resource/themes/lightdark-linux.css"
fi

###################  python detection  ####################

if $mingw ; then
	pybase=python$($pc --modversion $python)
	for x in $pybase.exe lib$pybase.dll ; do
		shares="$shares $x:$mingwpath/bin/$x"
	done
	for x in StringIO UserDict __future__ _abcoll _sysconfigdata _weakrefset abc atexit codecs collections     \
	         copy_reg ctypes/{__init__,_endian,util,wintypes} fnmatch functools genericpath glob heapq keyword \
	         linecache list2cmdline locale logging/{__init__,config,handlers} ntpath os re rlcompleter site    \
	         socket sre_compile sre_constants sre_parse stat string struct subprocess sysconfig threading      \
	         traceback types warnings weakref site-packages/readline ; do
		shares="$shares lib/$pybase/$x.py:$mingwpath/lib/$pybase/$x.py"
	done
	for x in _collections _ctypes _heapq _socket _ssl _struct _subprocess cPickle cStringIO itertools math strop ; do
		shares="$shares lib/$pybase/lib-dynload/$x.pyd:$mingwpath/lib/$pybase/lib-dynload/$x.pyd"
	done
	for y in encodings site-packages/pyreadline ; do
		for x in $(find $mingwpath/lib/$pybase/$y -name '*.py' -printf '%P ') ; do
			shares="$shares lib/$pybase/$y/$x:$mingwpath/lib/$pybase/$y/$x"
		done
	done
fi

python_version=$($python -c 'import platform; print(platform.python_version())')
extra_flags="$extra_flags $($pc --cflags $python) -fPIC"
ldlibs="$ldlibs $($pc --libs $python)"

#####################  gtk detection  #####################

if $mingw ; then
	shares="$shares $(find $mingwpath -name gschemas.compiled       -printf '%P:%p')"
	shares="$shares $(find $mingwpath -name loaders.cache           -printf '%P:%p')"
	shares="$shares $(find $mingwpath -name libpixbufloader-png.dll -printf '%P:%p')"
	shares="$shares $(find $mingwpath -name libpixbufloader-svg.dll -printf '%P:%p')"
	for x in libatk-1.0-0 libbrotlicommon libbrotlidec libbz2-1 libcairo-2 libcairo-gobject-2 libcrypto-3      \
	      libdatrie-1 libepoxy-0 libexpat-1 libffi-8 libfontconfig-1 libfreetype-6 libfribidi-0 libgcc_s_dw2-1 \
	      libgdk-3-0 libgdk_pixbuf-2.0-0 libgio-2.0-0 libglib-2.0-0 libgmodule-2.0-0 libgobject-2.0-0          \
	      libgraphite2 libgtk-3-0 libharfbuzz-0 libiconv-2 libintl-8 libjpeg-8 liblzma-5 libpango-1.0-0        \
	      libpangocairo-1.0-0 libpangoft2-1.0-0 libpangowin32-1.0-0 libpcre2-8-0 libpixman-1-0 libpng16-16     \
	      librsvg-2-2 libssl-3 libstdc++-6 libthai-0 libtiff-6 libwinpthread-1 libxml2-2 zlib1 ; do
		shares="$shares $x.dll:$mingwpath/bin/$x.dll"
	done
	vte=  # not available on windows :(
else
	vte=vte-2.91
fi

glib_version=$($pc --modversion glib-2.0)
gtk_version=$($pc --modversion $gtk)
extra_flags="$extra_flags $($pc --cflags $gtk $vte) -DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGTK_MULTIHEAD_SAFE"
ldlibs="$ldlibs $($pc --libs $gtk $vte)"

#################  gpib driver detection  #################

if [[ $gpib_request == 'autodetect' ]] ; then
	gpib=none
	if $mingw ; then find "$nipath" | grep ni488.h > /dev/null && gpib=ni488
	else             $pc --exists libgpib                      && gpib=linuxgpib
	fi
else
	gpib=$gpib_request
fi

if [[ $gpib == 'none' ]] ; then
	gpib_name='None'
	gpib_version=

elif [[ $gpib == 'linuxgpib' ]] ; then
	gpib_name='Linux GPIB'
	gpib_version=$($pc --modversion libgpib)

	option_flags="$option_flags -DLINUXGPIB"
	extra_flags="$extra_flags $($pc --cflags libgpib)"
	ldlibs="$ldlibs $($pc --libs libgpib)"

elif [[ $gpib == 'ni488' ]] ; then
	gpib_name='NI-488'
	gpib_version=

	option_flags="$option_flags -DNI488"
	extra_flags="$extra_flags -I'$(find "$nipath" -name ni488.h -printf %h)'"
	ldlibs="$ldlibs '$(find "$nipath" -name gpib-32.obj)'"
fi

#################  daq driver detection  ##################

if [[ $daq_request == 'autodetect' ]] ; then
	daq=none
	if $mingw ; then find "$nipath" | grep NIDAQmx.h > /dev/null && daq=nidaqmx
	else             $pc --exists comedilib                      && daq=comedi
	fi
else
	daq=$daq_request
fi

if [[ $daq == 'none' ]] ; then
	daq_name='None'
	daq_version=

elif [[ $daq == 'comedi' ]] ; then
	daq_name='Comedi'
	daq_version=$($pc --modversion comedilib)

	option_flags="$option_flags -DCOMEDI"
	extra_flags="$extra_flags $($pc --cflags comedilib)"
	ldlibs="$ldlibs $($pc --libs comedilib)"

elif [[ $daq == 'nidaqmx' ]] ; then
	daq_name='NI-DAQmx'
	daq_version=

	option_flags="$option_flags -DNIDAQMX"
	extra_flags="$extra_flags -I'$(find "$nipath" -name NIDAQmx.h -printf %h)'"
	ldlibs="$ldlibs -L'$(find "$nipath" -wholename "*/lib32/*/NIDAQmx.lib" -printf %h)' -lNIDAQmx"
fi

#######################  summary  #########################

echo \
"
   System:             $system $arch
   Python:             $python_version
   GLib version:       $glib_version
   GTK version:        $gtk_version
   DAQ driver:         $daq_name $daq_version
   GPIB driver:        $gpib_name $gpib_version
   Installation path:  $prefix
"

###################  generate makefiles  ##################

if [ ! -e Makefile.dep ] ; then
	echo "Makefile.dep does not exist, regenerating."
	regen=true
fi

if $regen ; then
	write_makefile_dep
fi
write_makefile
